package chatrpc;import java.awt.*;import java.awt.event.*;import java.util.Vector;import java.util.logging.Level;import java.util.logging.Logger;import javax.swing.*;import org.apache.xmlrpc.*;public class ChatUserImpl {    private String title = "Logiciel de discussion en ligne";    private String pseudo = null;    private XmlRpcClient server = null;    private JFrame window = new JFrame(this.title);    private JTextArea txtOutput = new JTextArea();    private JTextField txtMessage = new JTextField();    private JButton btnSend = new JButton("Envoyer");        public ChatUserImpl() {        try {            this.server = new XmlRpcClient("http://localhost:8090/RPC2");        } catch (Exception ex) {            ex.printStackTrace();        }        this.createIHM();        this.requestPseudo();    }    public void createIHM() {        // Assemblage des composants        JPanel panel = (JPanel)this.window.getContentPane();	JScrollPane sclPane = new JScrollPane(txtOutput);	panel.add(sclPane, BorderLayout.CENTER);        JPanel southPanel = new JPanel(new BorderLayout());        southPanel.add(this.txtMessage, BorderLayout.CENTER);        southPanel.add(this.btnSend, BorderLayout.EAST);        panel.add(southPanel, BorderLayout.SOUTH);                        // Gestion des évènements        window.addWindowListener(new WindowAdapter() {            public void windowClosing(WindowEvent e) {                window_windowClosing(e);            }        });        btnSend.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent e) {                btnSend_actionPerformed(e);            }        });	txtMessage.addKeyListener(new KeyAdapter() {	    public void keyReleased(KeyEvent event) {		if (event.getKeyChar() == '\n')		    btnSend_actionPerformed(null);	    }	});        // Initialisation des attributs        this.txtOutput.setBackground(new Color(220,220,220));	this.txtOutput.setEditable(false);        this.window.setSize(500,400);        this.window.setVisible(true);        this.txtMessage.requestFocus();    }    public void requestPseudo() {        boolean retour = false;        do {                        this.pseudo = JOptionPane.showInputDialog(                this.window, "Entrez votre pseudo : ",                this.title,  JOptionPane.OK_OPTION        );         if (this.pseudo == null) System.exit(0);                try {            Vector<String> params = new Vector<String>();            params.add(this.pseudo);            System.err.println(this.server.getMaxThreads());            retour = (boolean)this.server.execute("sample.subscribe", params);            if(!retour){                JOptionPane.showMessageDialog(this.window, pseudo+" existe deja");            }            } catch (Exception e) {                e.printStackTrace();            }        } while (!retour);            }    public void window_windowClosing(WindowEvent e) {               try {            Vector param = new Vector<String>();            param.add(this.pseudo);            this.server.execute("sample.unsubscribe", param);            System.exit(-1);        } catch (Exception ex) {            Logger.getLogger(ChatUserImpl.class.getName()).log(Level.SEVERE, null, ex);        }    }    public void btnSend_actionPerformed(ActionEvent e) {        try {            Vector params = new Vector();            params.addElement(new String(this.pseudo));            params.addElement(new String(this.txtMessage.getText()));            this.server.execute("sample.postMessage", params);                    } catch (Exception ex) {            System.err.println(ex.getMessage());        }        this.txtMessage.setText("");        this.txtMessage.requestFocus();            }    public static void main(String[] args) {        ChatUserImpl chat = new ChatUserImpl();        boolean received = false;        String mes = null;        String nouv = null;        boolean first = true;        while(true){            try {                mes = (String)chat.server.execute("sample.getMessage", new Vector());                received = true;                if(mes.equals(nouv)){                    first = false;                }else{                    first = true;                }            } catch (Exception e) {                received = false;            }finally{                if(received ){                    if(first){                        chat.txtOutput.append(mes+"\n");                        nouv = mes;                        first = false;                    }                                    }            }        }    }    }